.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Mediawiki::Client 3pm"
.TH WWW::Mediawiki::Client 3pm "2006-06-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
WWW::Mediawiki::Client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WWW::Mediawiki::Client;
.Ve
.PP
.Vb 4
\&  my $filename = 'Subject.wiki';
\&  my $mvs = WWW::Mediawiki::Client\->new(
\&      host => 'www.wikitravel.org'
\&  );
.Ve
.PP
.Vb 2
\&  # like cvs update
\&  $mvs\->do_update($filename);
.Ve
.PP
.Vb 2
\&  # like cvs commit
\&  $mvs\->do_commit($filename, $message);
.Ve
.PP
.Vb 3
\&  #aliases
\&  $mvs\->do_up($filename);
\&  $mvs\->do_com($filename, $message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WWW::Mediawiki::Client provides a very simple cvs-like interface for
Mediawiki driven WikiWiki websites, such as
<http://www.wikitravel.org|Wikitravel> or
<http://www.wikipedia.org|Wikipedia.>  
The interface mimics the two most basic cvs commands: update and commit
with similarly named methods.  Each of these has a shorter alias, as in
cvs.  
.SH "CONSTANTS"
.IX Header "CONSTANTS"
\fI$VERSION\fR
.IX Subsection "$VERSION"
.Sh "Update Status"
.IX Subsection "Update Status"
\fI\s-1STATUS_UNKNOWN\s0\fR
.IX Subsection "STATUS_UNKNOWN"
.PP
Indicates that \f(CW\*(C`WWW::Mediawiki::Client\*(C'\fR has no information about the file.
.PP
\fI\s-1STATUS_UNCHANGED\s0\fR
.IX Subsection "STATUS_UNCHANGED"
.PP
Indicates that niether the file nor the server page have changed.
.PP
\fI\s-1STATUS_LOCAL_ADDED\s0\fR
.IX Subsection "STATUS_LOCAL_ADDED"
.PP
Indicates that the file is new locally, and does not exist on the server.
.PP
\fI\s-1STATUS_LOCAL_MODIFIED\s0\fR
.IX Subsection "STATUS_LOCAL_MODIFIED"
.PP
Indicates that the file has been modified locally.
.PP
\fI\s-1STATUS_SERVER_MODIFIED\s0\fR
.IX Subsection "STATUS_SERVER_MODIFIED"
.PP
Indicates that the server page was modified, and that the modifications
have been successfully merged into the local file.
.PP
\fI\s-1STATUS_CONFLICT\s0\fR
.IX Subsection "STATUS_CONFLICT"
.PP
Indicates that there are conflicts in the local file resulting from a
failed merge between the server page and the local file.
.Sh "Option Settings"
.IX Subsection "Option Settings"
\fI\s-1OPT_YES\s0\fR
.IX Subsection "OPT_YES"
.PP
Indicates that the setting should always be applied.
.PP
\fI\s-1OPT_NO\s0\fR
.IX Subsection "OPT_NO"
.PP
Indicates that the setting should never be applied.
.PP
\fI\s-1OPT_DEFAULT\s0\fR
.IX Subsection "OPT_DEFAULT"
.PP
Indicates that the setting should be applied based on the user profile
default on the Wikimedia server.
.PP
\fI\s-1OPT_KEEP\s0\fR
.IX Subsection "OPT_KEEP"
.PP
Four-state options only.  Indicates that the setting should not be
changed from its current value on the server.
.Sh "Mediawiki form widgets"
.IX Subsection "Mediawiki form widgets"
\fI\s-1TEXTAREA_NAME\s0\fR
.IX Subsection "TEXTAREA_NAME"
.PP
\fI\s-1COMMENT_NAME\s0\fR
.IX Subsection "COMMENT_NAME"
.PP
\fI\s-1EDIT_SUBMIT_NAME\s0\fR
.IX Subsection "EDIT_SUBMIT_NAME"
.PP
\fI\s-1EDIT_SUBMIT_VALUE\s0\fR
.IX Subsection "EDIT_SUBMIT_VALUE"
.PP
\fI\s-1EDIT_PREVIEW_NAME\s0\fR
.IX Subsection "EDIT_PREVIEW_NAME"
.PP
\fI\s-1EDIT_PREVIEW_VALUE\s0\fR
.IX Subsection "EDIT_PREVIEW_VALUE"
.PP
\fI\s-1EDIT_TIME_NAME\s0\fR
.IX Subsection "EDIT_TIME_NAME"
.PP
\fI\s-1EDIT_TOKEN_NAME\s0\fR
.IX Subsection "EDIT_TOKEN_NAME"
.PP
\fI\s-1EDIT_WATCH_NAME\s0\fR
.IX Subsection "EDIT_WATCH_NAME"
.PP
\fI\s-1EDIT_MINOR_NAME\s0\fR
.IX Subsection "EDIT_MINOR_NAME"
.PP
\fI\s-1CHECKED\s0\fR
.IX Subsection "CHECKED"
.PP
\fI\s-1UNCHECKED\s0\fR
.IX Subsection "UNCHECKED"
.PP
\fI\s-1USERNAME_NAME\s0\fR
.IX Subsection "USERNAME_NAME"
.PP
\fI\s-1PASSWORD_NAME\s0\fR
.IX Subsection "PASSWORD_NAME"
.PP
\fI\s-1REMEMBER_NAME\s0\fR
.IX Subsection "REMEMBER_NAME"
.PP
\fI\s-1LOGIN_SUBMIT_NAME\s0\fR
.IX Subsection "LOGIN_SUBMIT_NAME"
.PP
\fI\s-1LOGIN_SUBMIT_VALUE\s0\fR
.IX Subsection "LOGIN_SUBMIT_VALUE"
.Sh "Files"
.IX Subsection "Files"
\fI\s-1CONFIG_FILE\s0\fR
.IX Subsection "CONFIG_FILE"
.PP
.Vb 1
\&  .mediawiki
.Ve
.PP
\fI\s-1COOKIE_FILE\s0\fR
.IX Subsection "COOKIE_FILE"
.PP
.Vb 1
\&  .mediawiki.cookies
.Ve
.PP
\fI\s-1SAVED_ATTRIBUTES\s0\fR
.IX Subsection "SAVED_ATTRIBUTES"
.PP
Controls which attributes get saved out to the config file.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "new"
.IX Subsection "new"
.Vb 1
\&  my $mvs = WWW::Mediawiki::Client\->new(host = 'www.wikitravel.org');
.Ve
.PP
Accepts name-value pairs which will be used as initial values for any of
the fields which have accessors below.  Throws the same execptions as the
accessor for any field named.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
.Sh "host"
.IX Subsection "host"
.Vb 1
\&  my $url = $mvs\->host('www.wikipediea.org');
.Ve
.PP
.Vb 1
\&  my $url = $mvs\->host('www.wikitravel.org');
.Ve
.PP
The \f(CW\*(C`host\*(C'\fR is the name of the Mediawiki server from which you want to
obtain content, and to which your submissions will be made.  There is no
default.  This has to be set before attempting to use any of the methods
which attempt to access the server.
.PP
\&\fBSide Effects:\fR
.IP "Server defaults" 4
.IX Item "Server defaults"
If WWW::Mediawiki::Client knows about the path settings for the Mediawiki
installation you are trying to use then the various path fields will also
be set as a side\-effect.
.IP "Trailing slashes" 4
.IX Item "Trailing slashes"
Any trailing slashes are deleted \fIbefore\fR the value of \f(CW\*(C`host\*(C'\fR is set.
.Sh "protocol"
.IX Subsection "protocol"
.Vb 1
\&  my $url = $mvs\->protocol('www.wikipediea.org');
.Ve
.PP
.Vb 1
\&  my $url = $mvs\->protocol('www.wikitravel.org');
.Ve
.PP
The \f(CW\*(C`protocol\*(C'\fR is the protocol used by the Mediawiki server from which you
want to obtain content, and to which your submissions will be made.  It can
be one of \f(CW\*(C`http\*(C'\fR or \f(CW\*(C`https\*(C'\fR with the default value being http.
.PP
\&\fBSide Effects:\fR
.IP "Server defaults" 4
.IX Item "Server defaults"
If WWW::Mediawiki::Client knows about the settings for the Mediawiki
installation you are trying to use then the various path fields will also
be set as a side\-effect.
.Sh "language_code"
.IX Subsection "language_code"
.Vb 1
\&  my $lang = $mvs\->language_code($lang);
.Ve
.PP
Most Mediawiki projects have multiple language versions.  This field can be
set to target a particular language version of the project the client is
set up to address.  When the \f(CW\*(C`filename_to_url\*(C'\fR and \f(CW\*(C`pagename_to_url\*(C'\fR methods
encounter the text '_\|_LANG_\|_' in any part of their constructed \s-1URL\s0 the
\&\f(CW\*(C`language_code\*(C'\fR will be substituted.
.PP
\&\f(CW\*(C`language_code\*(C'\fR defaults to 'en'.
.Sh "space_substitute"
.IX Subsection "space_substitute"
.Vb 1
\&  my $char = $mvs\->space_substitute($char);
.Ve
.PP
Mediawiki allows article names to have spaces, for instance the default
Meidawiki main page is called \*(L"Main Page\*(R".  The spaces need to be converted
for the \s-1URL\s0, and to avoid the normal but somewhat difficult to read \s-1URL\s0
escape the Mediawiki software substitutes some other character.  Wikipedia
uses a '+', as in \*(L"Main+Page\*(R" and Wikitravel uses a '_' as in \*(L"Main_page\*(R".
WWW::Mediawiki::Client always writes wiki files using the '_', but converts
them to whatever the \f(CW\*(C`space_substitute\*(C'\fR is set to for the \s-1URL\s0.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::URLConstructionException" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException"
.Sh "escape_filenames"
.IX Subsection "escape_filenames"
.Vb 1
\&  my $char = $mvs\->escape_filenames($do_escape);
.Ve
.PP
Mediawiki allows article names to be in \s-1UTF\-8\s0 and most international
Wikipedias use this feature. That leads us to \s-1UTF\-8\s0 encoded file names
and not all filesystems can handle them. So you can set this option to
some true value to make all your local file names with wiki articles
URL\-escaped.
.Sh "wiki_path"
.IX Subsection "wiki_path"
.Vb 1
\&  my $path = $mvs\->wiki_path($path);
.Ve
.PP
\&\f(CW\*(C`wiki_path\*(C'\fR is the path to the php page which handles all request to
edit or submit a page, or to login.  If you are using a Mediawiki site
which WWW::Mediawiki::Client knows about this will be set for you when you
set the \f(CW\*(C`host\*(C'\fR.  Otherwise it defaults to the 'wiki/wiki.phtml' which is
what you'll get if you follow the installation instructions that some with
Mediawiki.
.PP
\&\fBSide effects\fR
.IP "Leading slashes" 4
.IX Item "Leading slashes"
Leading slashes in any incoming value will be stripped.
.Sh "encoding"
.IX Subsection "encoding"
.Vb 1
\&  my $encoding = $mvs\->encoding($encoding);
.Ve
.PP
\&\f(CW\*(C`encoding\*(C'\fR is the charset in which the Mediawiki server expects uploaded
content to be encoded.  This should be set the first time you use do_login.
.Sh "username"
.IX Subsection "username"
.Vb 1
\&  my $url = $mvs\->username($url);
.Ve
.PP
The username to use if WWW::Mediawiki::Client is to log in to the Mediawiki server as a given
user.
.Sh "password"
.IX Subsection "password"
.Vb 1
\&  my $url = $mvs\->password($url);
.Ve
.PP
The password to use if WWW::Mediawiki::Client is to log in to the Mediawiki server as a given
user.  Note that this password is sent \fIen clair\fR, so it's probably not a
good idea to use an important one.
.Sh "commit_message"
.IX Subsection "commit_message"
.Vb 1
\&  my $msg = $mvs\->commit_message($msg);
.Ve
.PP
A \f(CW\*(C`commit_message\*(C'\fR must be specified before \f(CW\*(C`do_commit\*(C'\fR can be run.  This
will be used as the comment when submitting pages to the Mediawiki server.
.Sh "watch"
.IX Subsection "watch"
.Vb 1
\&  my $watch = $mvs\->watch($watch);
.Ve
.PP
Mediawiki allows users to add a page to thier watchlist at submit time
using using the \*(L"Watch this page\*(R" checkbox.  The field \f(CW\*(C`watch\*(C'\fR allows
commits from this library to add or remove the page in question to/from
your watchlist.
.PP
This is a four-state option:
.ie n .IP """OPT_YES""" 4
.el .IP "\f(CWOPT_YES\fR" 4
.IX Item "OPT_YES"
Always add pages to the watchlist.
.ie n .IP """OPT_NO""" 4
.el .IP "\f(CWOPT_NO\fR" 4
.IX Item "OPT_NO"
Remove pages from the watchlist.
.ie n .IP """OPT_KEEP""" 4
.el .IP "\f(CWOPT_KEEP\fR" 4
.IX Item "OPT_KEEP"
Maintain current watched state.
.ie n .IP """OPT_DEFAULT"" (default)" 4
.el .IP "\f(CWOPT_DEFAULT\fR (default)" 4
.IX Item "OPT_DEFAULT (default)"
Adhere to user profile default on the server.  Watched pages will
always remain watched, and all other pages will be watched if the
\&\*(L"watch all pages by default\*(R" option is enabled in the user profile.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::InvalidOptionException" 4
.IX Item "WWW::Mediawiki::Client::InvalidOptionException"
.Sh "minor_edit"
.IX Subsection "minor_edit"
.Vb 1
\&  my $minor = $mvs\->minor_edit($minor);
.Ve
.PP
Mediawiki allows users to mark some of their edits as minor using the \*(L"This
is a minor edit\*(R" checkbox.  The field \f(CW\*(C`minor_edit\*(C'\fR allows a commit from
the mediawiki client to be marked as a minor edit.
.PP
This is a three-state option:
.ie n .IP """OPT_YES""" 4
.el .IP "\f(CWOPT_YES\fR" 4
.IX Item "OPT_YES"
Always declare change as minor.
.ie n .IP """OPT_NO""" 4
.el .IP "\f(CWOPT_NO\fR" 4
.IX Item "OPT_NO"
Never declare change as minor.
.ie n .IP """OPT_DEFAULT"" (default)" 4
.el .IP "\f(CWOPT_DEFAULT\fR (default)" 4
.IX Item "OPT_DEFAULT (default)"
Adhere to user profile default on the server.  Edits will be marked
as minor if the \*(L"minor changes by default\*(R" option is enabled in the
user profile.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::InvalidOptionException" 4
.IX Item "WWW::Mediawiki::Client::InvalidOptionException"
.Sh "status"
.IX Subsection "status"
.Vb 1
\&  my %status = $mvs\->status;
.Ve
.PP
This field will be empty until do_update has been called, after which it
will be set to a hash of \f(CW\*(C`filename\*(C'\fR => \f(CW\*(C`status\*(C'\fR pairs.  Each \f(CW\*(C`status\*(C'\fR 
will be one of the following (see \s-1CONSTANTS\s0 for discriptions):
.RE
.IP "WWW::Mediawiki::Client::STATUS_UNKNOWN;"
.IX Item "WWW::Mediawiki::Client::STATUS_UNKNOWN;"
.RE
.PD 0
.IP "WWW::Mediawiki::Client::STATUS_UNCHANGED;"
.IX Item "WWW::Mediawiki::Client::STATUS_UNCHANGED;"
.RE
.IP "WWW::Mediawiki::Client::STATUS_LOCAL_ADDED;"
.IX Item "WWW::Mediawiki::Client::STATUS_LOCAL_ADDED;"
.RE
.IP "WWW::Mediawiki::Client::STATUS_LOCAL_MODIFIED;"
.IX Item "WWW::Mediawiki::Client::STATUS_LOCAL_MODIFIED;"
.RE
.IP "WWW::Mediawiki::Client::STATUS_SERVER_MODIFIED;"
.IX Item "WWW::Mediawiki::Client::STATUS_SERVER_MODIFIED;"
.RE
.IP "WWW::Mediawiki::Client::STATUS_CONFLICT;"
.IX Item "WWW::Mediawiki::Client::STATUS_CONFLICT;"
.PD
.Sh "site_url \s-1DEPRICATED\s0"
.IX Subsection "site_url DEPRICATED"
.Vb 1
\&  my $url = $mvs\->site_url($url);
.Ve
.PP
The site \s-1URL\s0 is the base url for reaching the Mediawiki server who's
content you wish to edit.  This field is now depricated in favor of the
\&\f(CW\*(C`host\*(C'\fR field which is basically the same thing without the protocol
string.
.PP
\&\fBSide Effects:\fR
.IP "Server defaults" 4
.IX Item "Server defaults"
If WWW::Mediawiki::Client knows about the path settings for the Mediawiki
installation you are trying to use then the various path fields will also
be set as a side\-effect.
.IP "Trailing slashes" 4
.IX Item "Trailing slashes"
Any trailing slashes are deleted \fIbefore\fR the value of \f(CW\*(C`site_url\*(C'\fR is set.
.SH "Instance Methods"
.IX Header "Instance Methods"
.Sh "do_login"
.IX Subsection "do_login"
.Vb 1
\&  $mvs\->do_login;
.Ve
.PP
The \f(CW\*(C`do_login\*(C'\fR method operates like the cvs login command.  The
\&\f(CW\*(C`host\*(C'\fR, \f(CW\*(C`username\*(C'\fR, and \f(CW\*(C`password\*(C'\fR attributes must be set before
attempting to login.  Once \f(CW\*(C`do_login\*(C'\fR has been called successfully any
successful commit from the same directory will be logged in the Mediawiki
server as having been done by \f(CW\*(C`username\*(C'\fR.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::AuthException" 4
.IX Item "WWW::Mediawiki::Client::AuthException"
.PD 0
.IP "WWW::Mediawiki::Client::CookieJarException" 4
.IX Item "WWW::Mediawiki::Client::CookieJarException"
.IP "WWW::Mediawiki::Client::LoginException" 4
.IX Item "WWW::Mediawiki::Client::LoginException"
.IP "WWW::Mediawiki::Client::URLConstructionException" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException"
.PD
.Sh "do_li"
.IX Subsection "do_li"
.Vb 1
\&  $mvs\->do_li;
.Ve
.PP
An alias for \f(CW\*(C`do_login\*(C'\fR.
.Sh "do_update"
.IX Subsection "do_update"
.Vb 1
\&  $self\->do_update($filename, ...);
.Ve
.PP
The \f(CW\*(C`do_update\*(C'\fR method operates like a much-simplified version of the cvs
update command.  The argument is a list of filenames, whose contents will
be compared to the version on the WikiMedia server and to a locally stored
reference copy.  Lines which have changed only in the server version will
be merged into the local version, while lines which have changed in both
the server and local version will be flagged as possible conflicts, and
marked as such, somewhate in the manner of cvs (actually this syntax comes
from the default conflict behavior of VCS::Lite):
.PP
.Vb 1
\&  ********************Start of conflict 1  Insert to Primary, Insert to Secondary ************************************************************
.Ve
.PP
.Vb 1
\&  The line as it appears on the server
.Ve
.PP
.Vb 1
\&  ****************************************************************************************************
.Ve
.PP
.Vb 2
\&  The line as it appears locally
\&  ********************End of conflict 1********************************************************************************
.Ve
.PP
After the merging, and conflict marking is complete the server version will
be copied into the reference version.
.PP
If either the reference version or the local version are empty, or if
either file does not exist they will both be created as a copy of the
current server version.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::URLConstructionException" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException"
.PD 0
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.IP "WWW::Mediawiki::Client::ServerPageException" 4
.IX Item "WWW::Mediawiki::Client::ServerPageException"
.IP "WWW::Mediawiki::Client::AbsoluteFileNameException" 4
.IX Item "WWW::Mediawiki::Client::AbsoluteFileNameException"
.PD
.Sh "do_up"
.IX Subsection "do_up"
An alias for \f(CW\*(C`do_update\*(C'\fR.
.Sh "do_commit"
.IX Subsection "do_commit"
.Vb 1
\&  $self\->do_commit($filename);
.Ve
.PP
As with \f(CW\*(C`do_update\*(C'\fR the \f(CW\*(C`do_commit\*(C'\fR method operates like a much
simplified version of the cvs commit command.  Again, the argument is a
filename.  In keeping with the operation of cvs, \f(CW\*(C`do_commit\*(C'\fR does not
automatically do an update, but does check the server version against the
local reference copy, throwing an error if the server version has changed,
thus forcing the user to do an update.  A different error is thrown if the
conflict pattern sometimes created by \f(CW\*(C`do_update\*(C'\fR is found.
.PP
After the error checking is done the local copy is submitted to the server,
and, if all goes well, copied to the local reference version.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::CommitMessageException" 4
.IX Item "WWW::Mediawiki::Client::CommitMessageException"
.PD 0
.IP "WWW::Mediawiki::Client::ConflictsPresentException" 4
.IX Item "WWW::Mediawiki::Client::ConflictsPresentException"
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.IP "WWW::Mediawiki::Client::URLConstructionException" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException"
.IP "WWW::Mediawiki::Client::UpdateNeededException" 4
.IX Item "WWW::Mediawiki::Client::UpdateNeededException"
.IP "WWW::Mediawiki::Client::InvalidOptionException" 4
.IX Item "WWW::Mediawiki::Client::InvalidOptionException"
.PD
.Sh "do_com"
.IX Subsection "do_com"
This is an alias for \f(CW\*(C`do_commit\*(C'\fR.
.Sh "do_preview"
.IX Subsection "do_preview"
.Vb 1
\&  $self\->do_preview($filename);
.Ve
.PP
The \f(CW\*(C`do_preview\*(C'\fR method is a non-writing version of the \f(CW\*(C`do_commit\*(C'\fR
method.  It uploads the given filename to test its formatting.  Its
behaviour and arguments are identical to \f(CW\*(C`do_commit\*(C'\fR.
.PP
The behaviour of \f(CW\*(C`do_preview\*(C'\fR is currently based on the environment.
If \f(CW\*(C`MVS_BROWSER\*(C'\fR is set, this program (typically a web browser) will
be launched on a temporary file.  Otherwise, the preview will be saved
to the file specified by the \f(CW\*(C`MVS_PREVIEW\*(C'\fR variable, or preview.html
if this is unset.  This behaviour is considered a prototype for future
functionality, and is \f(CW\*(C`subject to change\*(C'\fR in the near future.
.PP
Returns the name of the preview file, or undef if the file was sent to
a web browser.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::ConflictsPresentException" 4
.IX Item "WWW::Mediawiki::Client::ConflictsPresentException"
.PD 0
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.IP "WWW::Mediawiki::Client::URLConstructionException" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException"
.IP "WWW::Mediawiki::Client::UpdateNeededException" 4
.IX Item "WWW::Mediawiki::Client::UpdateNeededException"
.PD
.Sh "do_clean"
.IX Subsection "do_clean"
.Vb 1
\&  $self\->do_clean;
.Ve
.PP
Removes all reference files under the current directory that have no
corresponding Wiki files.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.Sh "save_state"
.IX Subsection "save_state"
.Vb 1
\&  $mvs\->save_state;
.Ve
.PP
Saves the current state of the wmc object in the current working directory.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.Sh "load_state"
.IX Subsection "load_state"
.Vb 1
\&  $mvs = $mvs\->load_state;
.Ve
.PP
Loads the state of the wmc object from that saved in the current working
directory.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::CorruptedConfigFileException" 4
.IX Item "WWW::Mediawiki::Client::CorruptedConfigFileException"
.Sh "get_server_page"
.IX Subsection "get_server_page"
.Vb 1
\&  my $wikitext = $mvs\->get_server_page($pagename);
.Ve
.PP
Returns the wikitext of the given Mediawiki page name.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::ServerPageException" 4
.IX Item "WWW::Mediawiki::Client::ServerPageException"
.Sh "get_local_page"
.IX Subsection "get_local_page"
.Vb 1
\&  my $wikitext = $mvs\->get_local_page($filename);
.Ve
.PP
Returns the wikitext from the given local file;
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::FileAccessException" 4
.IX Item "WWW::Mediawiki::Client::FileAccessException"
.PD 0
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.IP "WWW::Mediawiki::Client::AbsoluteFileNameException" 4
.IX Item "WWW::Mediawiki::Client::AbsoluteFileNameException"
.PD
.Sh "pagename_to_url"
.IX Subsection "pagename_to_url"
.Vb 1
\&  my $url = $mvs\->pagename_to_url($pagename);
.Ve
.PP
Returns the url at which a given pagename will be found on the Mediawiki
server to which this instance of points.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::URLConstructionException;" 4
.IX Item "WWW::Mediawiki::Client::URLConstructionException;"
.Sh "filename_to_pagename"
.IX Subsection "filename_to_pagename"
.Vb 1
\&  my $pagename = $mvs\->filname_to_pagename($filename);
.Ve
.PP
Returns the cooresponding server page name given a filename.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::AbsoluteFileNameException" 4
.IX Item "WWW::Mediawiki::Client::AbsoluteFileNameException"
.PD 0
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.PD
.Sh "filename_to_url"
.IX Subsection "filename_to_url"
.Vb 1
\&  my $pagename = $mvs\->filname_to_url($filename);
.Ve
.PP
Returns the cooresponding server \s-1URL\s0 given a filename.
.PP
\&\fBThrows:\fR
.IP "WWW::Mediawiki::Client::AbsoluteFileNameException" 4
.IX Item "WWW::Mediawiki::Client::AbsoluteFileNameException"
.PD 0
.IP "WWW::Mediawiki::Client::FileTypeException" 4
.IX Item "WWW::Mediawiki::Client::FileTypeException"
.PD
.Sh "pagename_to_filename"
.IX Subsection "pagename_to_filename"
.Vb 1
\&  my $filename = $mvs\->pagename_to_filename($pagename);
.Ve
.PP
Returns a local filename which cooresponds to the given Mediawiki page
name.
.Sh "url_to_filename"
.IX Subsection "url_to_filename"
.Vb 1
\&  my $filename = $mvs\->url_to_filename($url);
.Ve
.PP
Returns the local filename which cooresponds to a given \s-1URL\s0.
.Sh "list_wiki_files"
.IX Subsection "list_wiki_files"
.Vb 1
\&  @filenames = $mvs\->list_wiki_files;
.Ve
.PP
Returns a recursive list of all wikitext files in the local repository.
.SH "BUGS"
.IX Header "BUGS"
Please submit bug reports to the \s-1CPAN\s0 bug tracker at
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-Mediawiki\-Client>.
.SH "DISCUSSION"
.IX Header "DISCUSSION"
There is a discussion list.  You can subscribe or read the archives at:
<http://www.geekhive.net/cgi\-bin/mailman/listinfo/www\-mediawiki\-client\-l>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Mark Jaroski <mark@geekhive.net>" 4
.IX Item "Mark Jaroski <mark@geekhive.net>"
Original author, maintainer
.IP "Mike Wesemann <mike@fhi\-berlin.mpg.de>" 4
.IX Item "Mike Wesemann <mike@fhi-berlin.mpg.de>"
Added support for Mediawiki 1.3.10+ edit tokens
.IP "Bernhard Kaindl <bkaindl@ffii.org>" 4
.IX Item "Bernhard Kaindl <bkaindl@ffii.org>"
Improved error messages.
.IP "Oleg Alexandrov <aoleg@math.ucla.edu>, Thomas Widmann <twid@bibulus.org>" 4
.IX Item "Oleg Alexandrov <aoleg@math.ucla.edu>, Thomas Widmann <twid@bibulus.org>"
Bug reports and feedback.
.IP "Adrian Irving-Beer <wisq@wisq.net>" 4
.IX Item "Adrian Irving-Beer <wisq@wisq.net>"
Preview support, export support for multi-page update, more 'minor'
and 'watch' settings, and bug reports.
.IP "Nicolas Brouard <nicolas.brouard@libertysurf.fr>" 4
.IX Item "Nicolas Brouard <nicolas.brouard@libertysurf.fr>"
Fixed content-type bug.
.IP "Alex Kapranoff <alex@kapranoff.ru>" 4
.IX Item "Alex Kapranoff <alex@kapranoff.ru>"
Added \f(CW\*(C`escape_filename\*(C'\fR in order to support \s-1UTF\-8\s0 filenames on filesystems
lacking \s-1UTF\-8\s0 support.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2004\-2006 Mark Jaroski. 
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
